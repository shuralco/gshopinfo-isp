name: Deploy to ISPManager (Working)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass rsync

      - name: üß™ Test SSH connection
        run: |
          echo "Testing SSH connection..."
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'Connected successfully'"

      - name: üì¶ Build project locally
        run: |
          echo "Building backend..."
          cd backend
          npm ci || npm install
          npm run build
          cd ..
          echo "Build completed"

      - name: üöÄ Deploy to server
        run: |
          echo "Starting deployment..."
          
          # Create remote directories
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          mkdir -p /var/www/pashland/data/www/g-shop.info
          mkdir -p /var/www/pashland/backups/gshop
          mkdir -p /var/www/pashland/data/nodejs
          chown -R pashland:pashland /var/www/pashland/data || true
          EOF
          
          # Sync files to server
          echo "Syncing files..."
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env*' \
            --exclude='*.db*' \
            --exclude='uploads' \
            --exclude='.cache' \
            --exclude='.tmp' \
            --exclude='*.log' \
            --exclude='venv' \
            --exclude='__pycache__' \
            --exclude='screenshots*' \
            --exclude='*.png' \
            --exclude='*.py' \
            --exclude='*.sh' \
            --exclude='playwright-mcp' \
            --exclude='superdesign-mcp-claude-code' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/pashland/data/www/g-shop.info/

      - name: üîß Configure and start application
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          DEPLOY_PATH="/var/www/pashland/data/www/g-shop.info"
          cd ${DEPLOY_PATH}
          
          # Install backend dependencies
          echo "Installing backend dependencies..."
          cd backend
          npm ci --production || npm install --production
          
          # Ensure Strapi is installed
          echo "Ensuring Strapi core packages are installed..."
          npm install @strapi/strapi@4.25.13 @strapi/plugin-users-permissions@4.25.13 @strapi/plugin-i18n@4.25.13 @strapi/plugin-cloud@4.25.13 --production
          
          # Create .env file if not exists
          if [ ! -f ".env" ]; then
            echo "Creating .env file..."
            cat > .env << 'ENVFILE'
          NODE_ENV=production
          HOST=0.0.0.0
          PORT=3002
          APP_KEYS=toBeModified1,toBeModified2
          API_TOKEN_SALT=tobemodified
          ADMIN_JWT_SECRET=tobemodified
          JWT_SECRET=tobemodified
          DATABASE_CLIENT=sqlite
          DATABASE_FILENAME=./database.db
          STRAPI_ADMIN_BACKEND_URL=https://g-shop.info
          ENVFILE
          fi
          
          # Create database if not exists
          if [ ! -f "database.db" ]; then
            echo "Creating initial database..."
            npm run strapi admin:create-user -- \
              --email=vladpowerpro@gmail.com \
              --password=Qaqaqa12 \
              --firstname=Admin \
              --lastname=User || echo "Admin user creation skipped"
          fi
          
          cd ${DEPLOY_PATH}
          
          # Set permissions
          chown -R pashland:pashland ${DEPLOY_PATH}
          chmod 755 ${DEPLOY_PATH}
          
          # Stop existing processes
          echo "Stopping existing processes..."
          pkill -f "node.*g-shop.info" || true
          sleep 2
          
          # Start application with ISPManager Node.js
          echo "Starting application with ISPManager Node.js..."
          
          # Use ISPManager's NVM Node.js path
          export NODE_PATH=/var/www/pashland/data/.nvm/versions/node/v18.20.8/bin/node
          export NPM_PATH=/var/www/pashland/data/.nvm/versions/node/v18.20.8/bin/npm
          
          # Start via pashland user with correct paths
          su - pashland -c "cd ${DEPLOY_PATH} && /var/www/pashland/data/.nvm/versions/node/v18.20.8/bin/node app.js > /tmp/strapi-deploy.log 2>&1 &" || true
          
          # Alternative: Try PM2 restart
          su - pashland -c "/usr/lib/ispnodejs/bin/pm2 restart g-shop.info 2>/dev/null || /usr/lib/ispnodejs/bin/pm2 start ${DEPLOY_PATH}/app.js --name g-shop.info 2>/dev/null" || true
          
          # Try ISPManager restart
          if [ -f "/usr/local/mgr5/sbin/mgrctl" ]; then
            /usr/local/mgr5/sbin/mgrctl -m ispmgr nodeapp.restart elid=g-shop.info || true
          fi
          
          sleep 5
          
          # Check if running
          if pgrep -f "node.*g-shop.info" > /dev/null; then
            echo "‚úÖ Application is running"
          else
            echo "‚ö†Ô∏è Application may not be running, check manually"
          fi
          
          echo "Deployment completed!"
          EOF

      - name: üè• Health check
        run: |
          echo "Waiting for application to stabilize..."
          sleep 10
          
          # Check API
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://g-shop.info/api || echo "000")
          echo "API response: HTTP $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ] || [ "$HTTP_CODE" = "404" ]; then
            echo "‚úÖ Server is responding"
          else
            echo "‚ö†Ô∏è Server may not be fully ready yet"
          fi
          
      - name: üìä Summary
        if: always()
        run: |
          echo "================================"
          echo "Deployment Summary"
          echo "================================"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Status: ${{ job.status }}"
          echo "================================"
          echo "üåê Site: https://g-shop.info"
          echo "üîß Admin: https://g-shop.info/admin"
          echo "================================"