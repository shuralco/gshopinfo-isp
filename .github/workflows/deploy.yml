name: Deploy to ISPManager

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color
          
          echo -e "${GREEN}Starting deployment to ISPManager...${NC}"
          
          # Variables
          DEPLOY_PATH="/var/www/pashland/data/www/g-shop.info"
          TEMP_PATH="/tmp/gshop-deploy-$(date +%s)"
          BACKUP_PATH="/var/www/pashland/backups/gshop"
          
          # Create backup directory if not exists
          ssh root@${{ secrets.SERVER_HOST }} "mkdir -p ${BACKUP_PATH}"
          
          # Create temporary deployment directory
          echo -e "${YELLOW}Creating temporary deployment directory...${NC}"
          ssh root@${{ secrets.SERVER_HOST }} "mkdir -p ${TEMP_PATH}"
          
          # Upload files to temporary location
          echo -e "${YELLOW}Uploading files to server...${NC}"
          rsync -avz --exclude='.git' \
                --exclude='node_modules' \
                --exclude='.env' \
                --exclude='backend/.env' \
                --exclude='backend/node_modules' \
                --exclude='backend/.tmp' \
                --exclude='backend/.cache' \
                --exclude='backend/build' \
                --exclude='backend/public/uploads' \
                --exclude='backend/.strapi-updater.json' \
                --exclude='backend/database.db' \
                --exclude='backend/database.db-shm' \
                --exclude='backend/database.db-wal' \
                --exclude='frontend/node_modules' \
                --exclude='frontend/.next' \
                --exclude='scripts/node_modules' \
                ./ root@${{ secrets.SERVER_HOST }}:${TEMP_PATH}/
          
          # Execute deployment on server
          ssh root@${{ secrets.SERVER_HOST }} << 'ENDSSH'
          set -e
          
          DEPLOY_PATH="/var/www/pashland/data/www/g-shop.info"
          TEMP_PATH="${TEMP_PATH}"
          BACKUP_PATH="/var/www/pashland/backups/gshop"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          echo "Backing up database and uploads..."
          if [ -f "${DEPLOY_PATH}/backend/database.db" ]; then
            cp "${DEPLOY_PATH}/backend/database.db" "${BACKUP_PATH}/database_${TIMESTAMP}.db" 2>/dev/null || true
            cp "${DEPLOY_PATH}/backend/database.db-shm" "${BACKUP_PATH}/database_${TIMESTAMP}.db-shm" 2>/dev/null || true
            cp "${DEPLOY_PATH}/backend/database.db-wal" "${BACKUP_PATH}/database_${TIMESTAMP}.db-wal" 2>/dev/null || true
          fi
          
          if [ -d "${DEPLOY_PATH}/backend/public/uploads" ]; then
            tar -czf "${BACKUP_PATH}/uploads_${TIMESTAMP}.tar.gz" -C "${DEPLOY_PATH}/backend/public" uploads 2>/dev/null || true
          fi
          
          # Stop the application through ISPManager
          echo "Stopping Node.js application..."
          # ISPManager specific command to stop Node.js app
          /usr/local/mgr5/sbin/mgrctl -m ispmgr nodeapp.stop elid=g-shop.info 2>/dev/null || true
          sleep 3
          
          # Install dependencies in temporary location
          echo "Installing dependencies..."
          cd ${TEMP_PATH}/backend
          npm ci --production
          
          # Copy environment files from production
          if [ -f "${DEPLOY_PATH}/backend/.env" ]; then
            cp "${DEPLOY_PATH}/backend/.env" "${TEMP_PATH}/backend/.env"
          fi
          
          # Build Strapi
          echo "Building Strapi application..."
          cd ${TEMP_PATH}/backend
          npm run build
          
          # Preserve database and uploads
          echo "Preserving database and uploads..."
          if [ -f "${DEPLOY_PATH}/backend/database.db" ]; then
            cp "${DEPLOY_PATH}/backend/database.db" "${TEMP_PATH}/backend/database.db"
            cp "${DEPLOY_PATH}/backend/database.db-shm" "${TEMP_PATH}/backend/database.db-shm" 2>/dev/null || true
            cp "${DEPLOY_PATH}/backend/database.db-wal" "${TEMP_PATH}/backend/database.db-wal" 2>/dev/null || true
          fi
          
          if [ -d "${DEPLOY_PATH}/backend/public/uploads" ]; then
            mkdir -p "${TEMP_PATH}/backend/public"
            cp -r "${DEPLOY_PATH}/backend/public/uploads" "${TEMP_PATH}/backend/public/"
          fi
          
          # Run prefetch script
          echo "Running prefetch script..."
          cd ${TEMP_PATH}
          export STRAPI_API_URL="https://g-shop.info/api"
          node scripts/prefetch-strapi.js || echo "Prefetch failed, continuing..."
          
          # Atomic swap
          echo "Swapping deployment directories..."
          if [ -d "${DEPLOY_PATH}_old" ]; then
            rm -rf "${DEPLOY_PATH}_old"
          fi
          
          if [ -d "${DEPLOY_PATH}" ]; then
            mv "${DEPLOY_PATH}" "${DEPLOY_PATH}_old"
          fi
          
          mv "${TEMP_PATH}" "${DEPLOY_PATH}"
          
          # Set proper permissions
          echo "Setting permissions..."
          chown -R pashland:pashland ${DEPLOY_PATH}
          chmod 755 ${DEPLOY_PATH}
          chmod 755 ${DEPLOY_PATH}/backend
          
          # Ensure socket directory exists with proper permissions
          SOCKET_DIR="/var/www/pashland/data/nodejs"
          mkdir -p ${SOCKET_DIR}
          chown pashland:pashland ${SOCKET_DIR}
          chmod 755 ${SOCKET_DIR}
          
          # Start the application through ISPManager
          echo "Starting Node.js application..."
          /usr/local/mgr5/sbin/mgrctl -m ispmgr nodeapp.start elid=g-shop.info
          
          # Wait for application to start
          sleep 5
          
          # Check if the application is running
          echo "Checking application status..."
          if /usr/local/mgr5/sbin/mgrctl -m ispmgr nodeapp.status elid=g-shop.info | grep -q "running"; then
            echo "Application started successfully!"
            
            # Clean up old deployment
            if [ -d "${DEPLOY_PATH}_old" ]; then
              rm -rf "${DEPLOY_PATH}_old"
            fi
            
            # Clean up old backups (keep last 5)
            cd ${BACKUP_PATH}
            ls -t database_*.db 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
            ls -t uploads_*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
          else
            echo "Application failed to start! Rolling back..."
            
            # Rollback
            if [ -d "${DEPLOY_PATH}_old" ]; then
              rm -rf "${DEPLOY_PATH}"
              mv "${DEPLOY_PATH}_old" "${DEPLOY_PATH}"
              /usr/local/mgr5/sbin/mgrctl -m ispmgr nodeapp.start elid=g-shop.info
            fi
            
            exit 1
          fi
          
          echo "Deployment completed successfully!"
          ENDSSH
          EOF
          
          chmod +x deploy.sh

      - name: Deploy to server
        env:
          TEMP_PATH: /tmp/gshop-deploy-${{ github.run_id }}
        run: ./deploy.sh

      - name: Health check
        run: |
          echo "Performing health check..."
          sleep 10
          
          # Check if the API is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" https://g-shop.info/api)
          
          if [ "$response" = "200" ] || [ "$response" = "301" ] || [ "$response" = "302" ]; then
            echo "API is responding with status code: $response"
            echo "Deployment successful!"
          else
            echo "API health check failed with status code: $response"
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Deployment to ISPManager completed successfully!"
            echo "üåê Site: https://g-shop.info"
            echo "üì¶ Version: ${{ github.sha }}"
          else
            echo "‚ùå Deployment failed. Please check the logs."
          fi