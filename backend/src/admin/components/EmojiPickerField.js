import React, { useState } from 'react';
import { Field, FieldLabel, FieldInput, FieldError } from '@strapi/design-system/Field';
import { TextInput } from '@strapi/design-system/TextInput';
import { Button } from '@strapi/design-system/Button';
import { Popover } from '@strapi/design-system/Popover';
import { Grid, GridItem } from '@strapi/design-system/Grid';
import { Typography } from '@strapi/design-system/Typography';
import { Box } from '@strapi/design-system/Box';

const EmojiPickerField = ({ 
  description,
  disabled,
  error,
  intlLabel,
  name,
  onChange,
  placeholder,
  required,
  value,
}) => {
  const [isPopoverOpen, setIsPopoverOpen] = useState(false);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è —Å–∞–¥–æ–≤–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏
  const gardenEmojis = [
    // –û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    'üå±', 'üíß', 'üîß', 'ü™ì', '‚úÇÔ∏è', '‚ö°', 'üåø',
    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞  
    'ü§ñ', 'üå≥', 'üöú', 'üè†',
    // –†–æ—Å–ª–∏–Ω–∏ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–∞
    'üåπ', 'üçÉ', 'üå∫', 'üåª', 'üåæ', 'üçÄ',
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
    'üî®', 'ü™ö', 'üß∞', '‚öôÔ∏è', 'üî©', 'üìè'
  ];

  const handleEmojiSelect = (emoji) => {
    onChange({ target: { name, value: emoji } });
    setIsPopoverOpen(false);
  };

  const handleInputChange = (e) => {
    onChange({ target: { name, value: e.target.value } });
  };

  return (
    <Field name={name} required={required} error={error}>
      <FieldLabel>
        –Ü–∫–æ–Ω–∫–∞ (–µ–º–æ–¥–∑—ñ)
      </FieldLabel>
      
      {/* –ü–æ—Ç–æ—á–Ω–∞ –≤–∏–±—Ä–∞–Ω–∞ —ñ–∫–æ–Ω–∫–∞ */}
      <Box marginBottom={2}>
        <Typography variant="pi" textColor="neutral600">
          {value ? `–ü–æ—Ç–æ—á–Ω–∞ —ñ–∫–æ–Ω–∫–∞: ${value}` : '–Ü–∫–æ–Ω–∫–∞ –Ω–µ –æ–±—Ä–∞–Ω–∞'}
        </Typography>
      </Box>
      
      {/* –Ü–Ω–ø—É—Ç —Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É */}
      <Box display="flex" alignItems="center" gap={2}>
        <Box flex="1">
          <TextInput
            placeholder="–û–±–µ—Ä—ñ—Ç—å –µ–º–æ–¥–∑—ñ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É"
            name={name}
            onChange={handleInputChange}
            value={value || ''}
            disabled={disabled}
            error={error}
          />
        </Box>
        
        <Popover 
          source={
            <Button 
              variant="secondary" 
              onClick={() => setIsPopoverOpen(!isPopoverOpen)}
              disabled={disabled}
            >
              {value || 'üé®'} –í–∏–±—Ä–∞—Ç–∏
            </Button>
          }
          spacing={8}
          onDismiss={() => setIsPopoverOpen(false)}
          padding={3}
        >
          {isPopoverOpen && (
            <Box minWidth="300px">
              <Typography variant="sigma" marginBottom={2}>
                –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è —Å–∞–¥–æ–≤–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏:
              </Typography>
              
              <Grid gap={2} gridCols={8}>
                {gardenEmojis.map((emoji, index) => (
                  <GridItem key={index}>
                    <Button
                      variant={value === emoji ? "primary" : "tertiary"}
                      onClick={() => handleEmojiSelect(emoji)}
                      size="S"
                      style={{ 
                        fontSize: '20px',
                        minHeight: '40px',
                        minWidth: '40px',
                        padding: '8px'
                      }}
                    >
                      {emoji}
                    </Button>
                  </GridItem>
                ))}
              </Grid>
              
              <Box marginTop={3} paddingTop={2} borderTop="1px solid #f0f0f0">
                <Typography variant="pi" textColor="neutral600">
                  üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –±—É–¥—å-—è–∫–∏–π –µ–º–æ–¥–∑—ñ –≤—Ä—É—á–Ω—É –≤ –ø–æ–ª–µ –≤–∏—â–µ
                </Typography>
              </Box>
            </Box>
          )}
        </Popover>
      </Box>
      
      <FieldError />
      
      {description && (
        <Typography variant="pi" textColor="neutral600" marginTop={1}>
          {description}
        </Typography>
      )}
    </Field>
  );
};

export default EmojiPickerField;